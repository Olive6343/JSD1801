1.return关键字
return第一个作用是引导返回值；
return第二个作用结束当前方法执行，将调用权交还给调用端；

在一些场合，我们不需要返回值，但需要提前结束方法执行的时候，可以使用return;

continue只能用在循环里；
break可以用在循环和switch结构中。

return只能用在方法内；

2.递归：方法的自我调用
数学问题中，经常会使用公式推导，比如：1+3+5+7+...+n
假设第n项是f(n)，那么f(n+1)是f(n+1) = f(n) + 2，且f(1) = 1;

假设前n项和是sum(n) = f(1) + ... f(n)，sum(n+1) = sum(n) + f(n+1);

假设n=5，n>1,无法直接计算，n-1,f(n-1) + 2
n=4,n>1,n-1,f(n-1) + 2
n=3,n>1,n-1,f(n-1) + 2
n=2,n>1,n-1,f(n-1) + 2
n=1,f(n) = 1;

课堂练习：递归实现斐波那契数列，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n>=2，n∈N*）

3.构造器（方法）
创建对象的过程：Object obj = new Object();
①开辟内存空间，对象保存在堆内存中
②创建对象
③调用构造方法

构造方法的调用早于其它成员方法的调用；

构造方法：public + 类名作为方法名 + 参数列表 + 方法体
public Object(){
	
}

构造方法的方法名必须是类名；
构造方法不能有返回类型的概念；
其它部分与成员方法一致；

如果类没有指定构造器，那么，JVM会给类创建一个默认的构造器，没有参数。

带参数的构造方法，给构造器添加参数列表；

如果指定了带参数的构造器，而没有指定默认的构造器，类就不存在默认构造器，JVM也不会自行创建。

this关键字表示当前对象的引用；可以把它当作一个特殊的指代当前对象的变量。
this(参数列表)：通过这种方式可以实现构造方法之间的调用；如果有这种方式的调用，必须置于调用构造器的首行。

构造方法的重载：
指定默认的构造器；
指定带参数的构造器；

构造器主要用于属性初始化；